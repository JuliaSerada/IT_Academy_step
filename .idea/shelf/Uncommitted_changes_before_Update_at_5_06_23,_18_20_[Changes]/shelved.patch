Index: Testing_Draft/Zebra_test.py
===================================================================
diff --git a/Testing_Draft/Zebra_test.py b/Testing_Draft/Zebra_test.py
deleted file mode 100644
--- a/Testing_Draft/Zebra_test.py	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
+++ /dev/null	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
@@ -1,14 +0,0 @@
-# from zebra import Zebra
-
-
-def test_1_call_triple_times():
-    # zebra1 = Zebra()
-    #return all([
-        #zebra1.get_stripe() == "black line",
-        #zebra1.get_stripe() == "white line",
-        #zebra1.get_stripe() == "black line", ])
-
-
-def test_suite():
-    msg = f"test_1_call_twice = {test_1_call_triple_times()}."
-    print(msg)
Index: Testing_Draft/human.py
===================================================================
diff --git a/Testing_Draft/human.py b/Testing_Draft/human.py
deleted file mode 100644
--- a/Testing_Draft/human.py	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
+++ /dev/null	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
@@ -1,14 +0,0 @@
-@staticmethod
-    def is_alive_count(humans):
-        ls = HumanCreator.create(humans)
-        alive_count = 0
-        for human in ls:
-            if human.is_alive:
-                alive_count += 1
-            return alive_count
-
-    @staticmethod
-    def is_not_alive_count(humans):
-        total = len(humans)
-        total -= CountHuman.is_alive_count(humans)
-        return total
Index: Testing_Draft/Test01.py
===================================================================
diff --git a/Testing_Draft/Test01.py b/Testing_Draft/Test01.py
deleted file mode 100644
--- a/Testing_Draft/Test01.py	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
+++ /dev/null	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
@@ -1,32 +0,0 @@
-def test_1_is_adult():
-    human = Human(age=18)
-    return human.is_adult()
-
-
-def test_2_is_alive():
-    human = Human(alive=True)
-    return human.is_alive()
-
-
-def test_3_get_alive_count():
-    ls = [
-        Human(alive=True),
-        Human(alive=True),
-        Human(alive=False)
-    ]
-    return HumanStatCalculator.get_alive_count(ls) == 2
-
-
-def test_4_get_alive_count():
-    ls = [Human(alive=True), Human(alive=True), Human(alive=False)]
-    return HumanStatCalculator.get_not_alive_count(ls) == 1
-
-
-def test_suite():
-    msg = f"""
-     test_1_is_adult = {test_1_is_adult()}
-     test_2_is_alive = {test_2_is_alive()}
-     test_3_get_alive_count = {test_3_get_alive_count()}
-     test_4_get_alive_count = {test_4_get_alive_count()}
-    """
-    print(msg)
Index: Testing_Draft/laptop.py
===================================================================
diff --git a/Testing_Draft/laptop.py b/Testing_Draft/laptop.py
deleted file mode 100644
--- a/Testing_Draft/laptop.py	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
+++ /dev/null	(revision 762827027b5a10c333e24e9c4e78548ab82da7df)
@@ -1,103 +0,0 @@
-class Laptop:
-    def __init__(self, brand="no name", model="no name", price=0, number=0):
-        self.brand = brand
-        self.model = model
-        self.price = price
-        self.number = number
-
-    def get_brand(self):
-        return self.__brand
-
-    def get_model(self):
-        return self.__model
-
-    def get_price(self):
-        return self.__price
-
-    def __str__(self):
-        return f"Laptop: {self.brand}, model: {self.model}, price = ${self.price}, " \
-               f"number = {self.number}."
-
-    def __str__(self) -> str:
-        return f"Computer: " \
-               f"brand = {self.get_brand()}, " \
-               f"model = {self.get_model()}, " \
-               f"price = {self.get_price()} BYN"
-
-
-if __name__ == "__main__":
-    laptop1 = Laptop("Apple")
-    laptop2 = Laptop("Acer")
-    laptop3 = Laptop("HP")
-    laptop4 = Laptop("Lenovo")
-    laptop5 = Laptop("Asus")
-
-
-msg = f"""Statistic result:
-    Total amount: {Manager.total_amount(laptops)}
-    Computer with Max price: {Manager.max_price(laptops)} 
-    Computer with Min price: {Manager.min_price(laptops)}
-    """
-    print(msg)
-
-
-@staticmethod
-    def total_amount(ls):
-        total_amount = 0
-        for item in ls:
-            total_amount += item.get_price()
-        return total_amount
-
-    @staticmethod
-    def max_price(ls):
-        max_laptop = ls[0]
-        for item in ls:
-            if item.get_price() > max_laptop.get_price():
-                max_laptop = item
-        return max_laptop
-
-    @staticmethod
-    def min_price(ls):
-        min_laptop = ls[0]
-        for item in ls:
-            if item.get_price() < min_laptop.get_price():
-                min_laptop = item
-        return min_laptop
-
-laptop1 = Laptop("Apple", "Macbook Air Pro 14", 1600, 55),
-    laptop2 = Laptop("Acer", "Acer Chromebook Spin 714", 679, 22)
-    laptop3 = Laptop("HP", "HP ENVY x360", 1300, 20)
-    laptop4 = Laptop("Lenovo", "Lenovo Yoga 9i 14", 1234, 32)
-    laptop5 = Laptop("Asus", "ASUS ROG Zephyrus G14", 1050, 28)
-
-    ls = (laptop1, laptop2, laptop3, laptop4, laptop5)
-
-[Laptop(brand="Apple", model="Macbook Air Pro 14", price=1600, number=55),
-          Laptop(brand="Acer", model="Acer Chromebook Spin 714", price=679, number=22),
-          Laptop(brand="HP", model="HP ENVY x360", price=1300, number=20)]
-
-
-class Laptop:
-    def __init__(self, brand="no name", model="no name", price=0, number=0):
-        super().__init__()
-        self.__brand = brand
-        self.__model = model
-        self.__price = price
-        self.__number = number
-
-    def get_brand(self):
-        return self.__brand
-
-    def get_model(self):
-        return self.__model
-
-    def get_price(self):
-        return self.__price
-
-    def get_number(self):
-        return self.__number
-
-    def __str__(self):
-        return f"Laptop: {self.get_brand}, model: {self.get_model}, price = ${self.get_price}, " \
-               f"number = {self.get_number}."
-
